S.A.M -> Single Abstract Methods or Functional Interfaces are interfaces that only have one method.

Lambda - these can only be used on Functional Interfaces.

Collections:
    List - When sequence matters.
        ArrayList
        LinkedList
        Vector
    Set - When duplicates isn't allowed.
        HashSet
        TreeSet
        LinkedHashSet
    Map - When finding something by key matters. It is a part of the Java Collection, but it does not implement the collection interface.
        HashMap
        TreeMap
        LinkedHashMap
        Hashtable

Interfaces can only extend other interfaces. It cannot extend classes. The "Implements" keyword is reserved or used only for interfaces.
The "Extends" keyword is only applicable on classes, but it can be used on interfaces when you extend other interfaces. It won't work if you extend a class to an interface or vice versa.

Reference Equality vs Object Equality
    When two references maps to the same object, they are equal. But when each references has different objects, then they are not equal even if it has the same contents.
    When you create an object, Java creates a unique hashcode or memory address that maps to that object. That's why if you compare two objects then they are not equal. Considering you did not override the hashcode() and equals()


HashSets
    Does not accept duplicates! When you add an object in a hash set, it checks for the hash code of the objects that are already in the set and compares it to the new object that you are trying to add. If the hashcode matches other hashcode, then it will try to compare the equals() of both objects. If it returns true, that means that the object to be added is a duplicate. The add() method returns true or false (if you care). False if it is a duplicate and true if not.
    a.equals(b) must imply a.hashcode() == b.hashcode. But a.hashcode() == b.hashcode() doesn't imply a.equals(b).

TreeSets
    This is the same as hashsets wherein it doesn't accept duplicates, but unlike hashset, treeset stay sorted.

HashMap
    This takes an argument of a key and a value. Map(key, value)
API
    Application Programming Interface

Convenience Factory Methods for Collections
    allows you to easily create a List, Set, or Map thatâ€™s been prefilled with known data. There are a couple of things to understand about using them.
    Creating list, sets, and maps using Convenience Factory Method
    List<Integer> integers = List.of(1,2,3,4);
    Sets<Integer> integers = Set.of(1,2,3,4);
    Map<String, Integer> integer = Map.ofEntries(Map.entry("One", 1), Map.entry("two", 2));

Generics
    If you want to take a list of animals List<Animals>, it can take only a List<Animals>, not List<Dog> or List<Cat>.

Lambdas can be used in a loop where in you want to modify each item in a list. You will use a forEach method from the Iterable Interface.
    List<Color> colors = List.of("red", "blue", "green");
    colors.forEach(color -> System.out.println(color));
